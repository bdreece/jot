// jot - a simple note-taking app
// Copyright (C) 2022 Brian Reece

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator zod {
  provider = "zod-prisma"
  output   = "../generated/zod"
}

generator gql {
  provider = "typegraphql-prisma"
  output   = "../generated/type-graphql"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            Int         @id @default(autoincrement())
  dateCreated   DateTime    @default(now())
  dateUpdated   DateTime?
  /// @zod.max(63, { message: "First name must be fewer than 64 characters" })
  firstName     String      @db.VarChar(63)
  /// @zod.max(63, { message: "First name must be fewer than 64 characters" })
  lastName      String      @db.VarChar(63)
  phone         String      @unique @db.VarChar(31)
  phoneVerified DateTime?
  hash          String      @db.VarChar(255)
  salt          String      @db.VarChar(255)
  directories   Directory[]
}

model Directory {
  id          Int         @id @default(autoincrement())
  dateCreated DateTime    @default(now())
  dateUpdated DateTime?
  /// @zod.max(255, { message: "Name must be fewer than 256 characters" })
  name        String      @db.VarChar(255)
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  parent      Directory   @relation("subdirectory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    Int
  children    Directory[] @relation("subdirectory")
  notes       Note[]
  assets      Asset[]
}

model Asset {
  id          Int       @id @default(autoincrement())
  dateCreated DateTime  @default(now())
  dateUpdated DateTime?
  /// @zod.max(255, { message: "Name must be fewer than 256 characters" })
  name        String    @db.VarChar(255)
  directory   Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  directoryId Int
  url         String    @db.VarChar(255)
  mimeType    String    @db.VarChar(127)
}

model Note {
  id          Int       @id @default(autoincrement())
  dateCreated DateTime  @default(now())
  dateUpdated DateTime?
  /// @zod.max(255, { message: "Name must be fewer than 256 characters" })
  name        String    @db.VarChar(255)
  directory   Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  directoryId Int
  url         String    @db.VarChar(255)
}
